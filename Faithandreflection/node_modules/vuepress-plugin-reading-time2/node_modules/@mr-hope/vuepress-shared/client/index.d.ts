import * as vue from 'vue';
import { VNode, ComputedRef } from 'vue';
import { App, ThemeConfig } from '@vuepress/core';
import { PageFrontmatter } from '@vuepress/client';

declare const IconBase: vue.DefineComponent<{
    name: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, () => VNode, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    name: string;
    color: string;
} & {}>, {
    name: string;
    color: string;
}>;

/** Types for supported lang codes */
declare type HopeLang = "zh-CN" | "en-US" | "vi-VN" | "de-AT";
/** Types for supported lang paths */
declare type HopeLangPath = "/zh/" | "/en/" | "/vi/" | "/de/";
interface HopeThemeLocaleConfigItem {
    /** 当前语言代码 */
    lang?: string;
    /** 多语言下拉菜单的标题 */
    selectText?: string;
    /** 该语言在下拉菜单中的标签 */
    label?: string;
    /** 辅助标签 */
    ariaLabel?: string;
    /** 页面信息 */
    meta: {
        /** 贡献者文字 */
        contributor: string;
        /** 编辑链接文字 */
        editLink: string;
        /** 该语言下的更新时间文字 */
        updateTime: string;
    };
    /** 主题色配置 */
    themeColor: {
        /** 颜色提示文字 */
        themeColor: string;
        /** 主题模式提示文字 */
        themeMode: string;
    };
    /** 加密 */
    encrypt: {
        title: string;
        errorHint: string;
    };
    /** 404错误页 */
    error404: {
        /** 错误提示语 */
        hint: string[];
        /** 返回主页文字 */
        home: string;
        /** 返回上一页文字 */
        back: string;
    };
    /** 博客设置 */
    blog: {
        /** 文章文字 */
        article: string;
        /** 文章列表文字 */
        articleList: string;
        /** 分类文字 */
        category: string;
        /** 标签文字 */
        tag: string;
        /** 时间轴文字 */
        timeline: string;
        /** 时间轴显示文字 */
        timelineText: string;
        /** 全部文字 */
        allText: string;
        /** 个人介绍 */
        intro: string;
        /** 搜藏文字 */
        star: string;
        /** 幻灯片 */
        slides: string;
        /** 加密 */
        encrypt: string;
    };
}
declare type PluginI18nConvert<T> = Record<HopeLangPath, T> & {
    "/"?: T;
};

declare const showLangError: (lang: string) => void;
/** Check if the lang is supported */
declare const checkLang: (lang: string | undefined) => boolean;
/** Get language of root directory */
declare const getRootLang: (app: App) => HopeLang;
/** Get the infer language path from root directory language */
declare const getRootLangPath: (app: App) => HopeLangPath;
/** Get path from language */
declare const lang2Path: (lang?: string) => HopeLangPath | "/";
/** Get language from path */
declare const path2Lang: (path?: string) => HopeLang;
/** Get locate of certain language */
declare const getLocale: (lang: string) => HopeThemeLocaleConfigItem;
/** Get Default ThemeLocale */
declare const getDefaultLocale: () => HopeThemeLocaleConfigItem;

declare type IAnyObject = Record<string, any>;
/** Deep merge objects to the first one */
declare const deepAssign: <T extends IAnyObject, U extends IAnyObject = T, V extends IAnyObject = T>(originObject: T, ...assignObjects: U[]) => V;
/** Deep merge objects to the last one */
declare const deepAssignReverse: (...assignObjects: IAnyObject[]) => IAnyObject;

declare const capitalize: (word: string) => string;
declare const strictCapitalize: (word: string) => string;

interface DateOptions {
    /**
     * @default 'en'
     */
    lang?: string;
    timezone?: string;
    /**
     * @default 'full'
     */
    type?: "date" | "time" | "full";
}
interface DateDetail {
    year: number;
    month: number;
    day: number;
    hour: number;
    minute: number;
    second: number;
}
interface DateInfo {
    display: string;
    value: Date | undefined;
    detail: Partial<DateDetail>;
}
declare const timeTransformer: (date: Date, options: DateOptions) => string;
declare const getDate: (date: string | Date | undefined, options?: DateOptions) => DateInfo | null;

/**
 * @see https://stackoverflow.com/questions/223652/is-there-a-way-to-escape-a-cdata-end-token-in-xml
 */
declare const encodeCDATA: (content: string) => string;
declare const encodeXML: (content: string) => string;

interface BasePageFrontMatter extends PageFrontmatter {
    /** Page icon */
    icon?: string;
    /** Page Author(s) */
    author?: string[] | string | false;
    /** Whether the content is original */
    original?: boolean;
    /**
     * Page Category(ies)
     */
    category?: string | string[];
    /**
     * Writting Date
     */
    date?: Date;
    /**
     * Page Tag(s)
     */
    tag?: string[] | string;
    /**
     * Whether the page is an article
     */
    article?: boolean;
    /**
     * Page Cover
     */
    cover?: string;
    /**
     * Page Banner
     */
    banner?: string;
    /**
     * 页脚文字
     */
    footer?: string | boolean;
    /**
     * 版权文字
     */
    copyrightText?: string | false;
    /**
     * 是否是主页
     *
     * Whether is home page
     */
    home?: boolean;
    /**
     * @deprecated use `date` instead
     */
    time?: Date | string;
    /**
     * @deprecated use `category` instead
     */
    categories?: string[];
    /**
     * @deprecated use `tag` instead
     */
    tags?: string[];
}

interface BaseThemeConfig extends ThemeConfig {
    /**
     * Theme locales config
     *
     * 主题多语言配置
     */
    locales?: Record<string, Record<string, unknown> & {
        lang?: string;
    }>;
    /**
     * Whether enable pure mode
     *
     * 是否开启纯净模式
     *
     * @default false
     */
    pure?: boolean;
    /**
     * 作者
     */
    author?: string[] | string;
    /**
     * Font class 图标前缀
     *
     * Font class Icon prefix
     *
     * @default 'icon-'
     */
    iconPrefix?: string;
    /**
     * Blog Config
     */
    blog: unknown | false;
}

declare const getAuthor: (frontmatter: BasePageFrontMatter, themeConfig: BaseThemeConfig, fallback?: string | string[] | undefined) => string[];

declare const _getAuthor: (author: string[] | string | false | undefined, canDisable?: boolean) => string[];
declare const getCategory: (category: string[] | string | undefined) => string[];
declare const getTag: (tag: string[] | string | undefined) => string[];

/**
 * check if string is a valid url
 */
declare const isUrl: (test: string) => boolean;
declare const isAbsoluteUrl: (test: string) => boolean;

declare type AuthorRef = ComputedRef<string[]>;
declare const useAuthor: (fallback?: string | string[] | undefined) => AuthorRef;
declare type CategoryRef = ComputedRef<string[]>;
declare const useCategory: () => CategoryRef;
declare type TagRef = ComputedRef<string[]>;
declare const useTag: () => TagRef;
declare type DateRef = ComputedRef<DateInfo | null>;
declare const useDate: (options?: DateOptions | undefined, fallback?: Date | undefined) => DateRef;

declare type PageTitleRef = ComputedRef<string>;
declare const usePageTitle: () => PageTitleRef;

declare type PluginConfigRef<T> = ComputedRef<T>;
interface PluginConfigConvert<T> {
    plugins?: {
        [key: string]: T;
    };
}
declare const useThemePluginConfig: <T>(key: string) => PluginConfigRef<T>;

declare const useThemeAuthor: () => ComputedRef<string[]>;
declare const useIconPrefix: () => ComputedRef<string>;
declare const useBlogConfig: () => ComputedRef<unknown>;
declare const usePure: () => ComputedRef<boolean>;

export { AuthorRef, BasePageFrontMatter, BaseThemeConfig, CategoryRef, DateDetail, DateInfo, DateOptions, DateRef, HopeLang, HopeLangPath, HopeThemeLocaleConfigItem, IconBase, PageTitleRef, PluginConfigConvert, PluginConfigRef, PluginI18nConvert, TagRef, _getAuthor, capitalize, checkLang, deepAssign, deepAssignReverse, encodeCDATA, encodeXML, getAuthor, getCategory, getDate, getDefaultLocale, getLocale, getRootLang, getRootLangPath, getTag, isAbsoluteUrl, isUrl, lang2Path, path2Lang, showLangError, strictCapitalize, timeTransformer, useAuthor, useBlogConfig, useCategory, useDate, useIconPrefix, usePageTitle, usePure, useTag, useThemeAuthor, useThemePluginConfig };
